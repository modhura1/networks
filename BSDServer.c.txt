#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <stdio.h>
#include <unistd.h> 



#define MAX_MSG 100
#define SERVER_ADDR "127.0.0.1"
#define SERVER_PORT 1500
#define CLIENT_ADDR "127.0.0.1"
#define CLIENT_PORT 1502

int main ( ) {
  
  int sd, newSd, cliLen, n,rc,i;

  struct sockaddr_in cliAddr, servAddr;
  char line[MAX_MSG];


  /**********************************/	
  /* build server address structure */
  /**********************************/	

  bzero((char *)&servAddr, sizeof(servAddr));
  servAddr.sin_family = AF_INET;
  servAddr.sin_addr.s_addr = inet_addr(SERVER_ADDR);
  servAddr.sin_port = htons(SERVER_PORT);

  bzero((char *)&cliAddr, sizeof(cliAddr));
  cliAddr.sin_family = AF_INET;
  cliAddr.sin_addr.s_addr = inet_addr(CLIENT_ADDR);
  cliAddr.sin_port = htons(CLIENT_PORT);

/*
  bzero((char *)&servAddr, sizeof(servAddr));
  servAddr.sin_family = AF_INET;
  inet_aton(SERVER_ADDR, &servAddr.sin_addr);
  servAddr.sin_port = htons(SERVER_PORT);
*/


  /************************/	
  /* create stream socket */
  /************************/	

  sd = socket(AF_INET, SOCK_STREAM, 0);
  printf("successfully created stream client\n");

  /**************************/	
  /* bind local port number */
  /**************************/	
  
  bind(sd, (struct sockaddr *) &cliAddr, sizeof(cliAddr));
  printf("bound local port successfully\n");


  /********************************/	
  /* specify number of concurrent */ 
  /* clients to listen for        */
  /********************************/	
  connect(sd, (struct sockaddr *) &servAddr, sizeof(servAddr));
 
 
  do {

    printf("Enter string to send:\n");
    scanf("%s",line);

    /*****************************/
    /* wait for client connection*/
    /*****************************/    

    send(sd,line,strlen(line)+1,0);

    printf("Sending data: ",line);

    /*****************************/
    /* wait for data from client */
    /*****************************/       
    }while(abs(strcmp(line, "quit")));

    close(sd);
 
    return 0;
}
